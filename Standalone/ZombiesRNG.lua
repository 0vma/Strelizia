local a={ { ClassName="LocalScript", Closure=function() if(not game:IsLoaded())then game.Loaded:Wait() end if Fluent then Fluent.Destroy()end local a=require(script.Library); a.Debug=true; local b=a.Libraries local c=b.Special local d= c.GameModules local e=b.Generic local f=e.Cache local g=e.LRM_Variables local h= e.Actions local i=e.Interface.Get()local j= e.Tree local k= e.Promise local l= e.Signal local m=e.Threading local n=e.Services local o= e.Trove local p=a.Functions local q=p.Special local r=p.Generic local s=n.Players local t= n.RunService local u=n.Workspace local v= n.ReplicatedStorage local w= n.UserInputService local x= n.GuiService local y=n.CoreGui local z=s.LocalPlayer local A=game.FindFirstChild local B=game.FindFirstChildWhichIsA local C= game.FindFirstAncestor local D= game.IsA local E=f.Get'ScriptCache'; E.InitTime=DateTime.now().UnixTimestamp local F=i.Fluent local G=i.SaveManager local H=i.ThemeManager getgenv().Fluent=F local I=F:CreateWindow{ Title="strelizia.cc", SubTitle="v"..g.LRM_ScriptVersion, TabWidth=120, Size=UDim2.fromOffset(600,480), Resize=true, MinSize=Vector2.new(430,350), Acrylic=false, Theme="Darker", MinimizeKey=Enum.KeyCode.RightControl } local J={ Home=I:CreateTab{ Title="Home", Icon="house" }, Combat=I:CreateTab{ Title="Combat", Icon="swords" }, Visuals=I:CreateTab{ Title="Visuals", Icon="eye" }, Misc=I:CreateTab{ Title="Others", Icon="circle-ellipsis" }, Settings=I:CreateTab{ Title="Settings", Icon="settings" }, } local K={ Home_Information=J.Home:AddSection"↳ Information", Home_Credits=J.Home:AddSection"↳ Credits", Combat_SilentAim=J.Combat:AddSection"↳ Silent Aim", Combat_Ragebot=J.Combat:AddSection"↳ Rage Bot", Visuals_ZombieESP=J.Visuals:AddSection"↳ Zombie Text", Visuals_PowerupESP=J.Visuals:AddSection"↳ Powerup Text", Misc_Movement=J.Misc:AddSection"↳ Movement", Misc_Others=J.Misc:AddSection"↳ Others" } do local L=K.Home_Information:CreateParagraph("ClientUptimeParagraph",{ Title="Client Uptime: nil", TitleAlignment=Enum.TextXAlignment.Center, }); m.New("ClientUptimeParagraph",function(M) while F.Loaded and task.wait(1)do L.Instance.TitleLabel.Text=string.format("Script Uptime: %s",r.FormatHms(r.GetUptime())) end end):Start() local M=K.Home_Information:CreateParagraph("LuaHeapParagraph",{ Title="Lua Heap (Megabytes): nil", TitleAlignment=Enum.TextXAlignment.Center, }); m.New("LuaHeapParagraph",function(N) while F.Loaded and task.wait(1)do M.Instance.TitleLabel.Text=string.format('Lua Heap: %sMB', tostring(r.CommaNumber(math.ceil(gcinfo()/1000)))) end end):Start() K.Home_Information:CreateButton{ Title="Join Discord", Description="prompts discord invite if the user is on pc, copies to clipboard otherwise", Callback=function() r.PromptDiscordJoin('Vf4Wu3Cft7',true) F:Notify{ Title="Discord Prompted/Copied", Content="discord invite has been prompted/copied to your clipboard!", Duration=2 } end } K.Home_Credits:CreateParagraph("Credits",{ Title="vma, kalas, pryxo, felix", TitleAlignment=Enum.TextXAlignment.Center, }); end do r.AssertFunctions({"getrawmetatable","hookmetamethod"},function() local L=K.Combat_SilentAim:CreateSlider("SilentAimFOV",{Title="Field of View",Description="(0 = infinite)",Default=90,Min=0,Max=360,Rounding=0}) local M=K.Combat_SilentAim:CreateToggle("ShowSilentAimFOV",{Title="Show Field of View",Default=false,Description="lets you see the fov circle on the screen"}) M:OnChanged(function(N) if not N then m.TerminateById'ShowSilentAimFOV'; return end m.New('ShowSilentAimFOV',function(O) O:AddObject(r.SmartDraw('Circle',{ Radius=L.Value, Color=Color3.fromRGB(255,255,255), Filled=false, NumSides=64, Visible=false, Transparency=1, Thickness=2 },function(P,Q)local R, S=r.GetScreenSize() local T=r.GetMousePosition() P.Visible=M.Value P.Radius=L.Value P.Position=Vector2.new(T.X,T.Y+S.Y) end)) end):Start() end) local N=K.Combat_SilentAim:CreateToggle("SilentAimToggle",{Title="Silent Aim",Default=false,Description="determines if silent aim is on or off"}) local O O=hookmetamethod(game,"__namecall",newcclosure(function(P,...) local Q=getnamecallmethod(); if N.Value and Q=='FireServer'and(not F.Options.AutoFireToggle.Value)then local R=q.GetWeapon(); if P==A(R,'Event')then local S=L.Value local T={...} local U=q.GetClosestEnemyToMouse((S==0 and math.huge)or S); if U then T[1]=U.Head.Position end setnamecallmethod'FireServer' return O(P,unpack(T)) end end return O(P,...) end)) end,function(L) K.Combat_SilentAim:CreateParagraph("AssetFuncSilentAim",{ Title="Unsupported Executor", TitleAlignment=Enum.TextXAlignment.Center, Content=string.format('your executor lacks features required for this feature: %s', tostring(table.concat(L,", "))), ContentAlignment=Enum.TextXAlignment.Center }); end) K.Combat_Ragebot:CreateParagraph("RagebotNote",{ Title="Ragebot Note", TitleAlignment=Enum.TextXAlignment.Center, Content="Ragebot is obvious and you can get banned while using it, use it WITH CAUTION!\nSilent aim settings don't affect ragebot", ContentAlignment=Enum.TextXAlignment.Center }); local L=K.Combat_Ragebot:CreateToggle("AutoFireToggle",{Title="Auto Fire",Default=false,Description="automatically fires towards enemies while not consuming any ammo (doesnt bypass weapon cooldown)"}) local M=K.Combat_Ragebot:CreateToggle("RagebotTeleport",{Title="Teleport to Zombies",Description="determines if the script will teleport around zombies to shoot them (doesnt work without auto fire)",Default=false}) local N=K.Combat_Ragebot:CreateSlider("TeleportDistance",{Title="Teleport Distance",Description="in studs",Default=15,Min=1,Max=30,Rounding=0}) L:OnChanged(function(O) if not O then m.TerminateById'AutoFireToggle' return end m.New('AutoFireToggle',function(P) while F.Loaded and task.wait()do if(not r.IsAlive(z))then continue end local Q=z.Character; local R=Q.PrimaryPart local S=R.Position; if S.Y<=-250 then R.CFrame=CFrame.new(S.X,500,S.Z) end local T=q.GetEnemies() if(not T)or(#T<1)then continue end for U,V in T do r.HaltLatency(400,150) local W=A(V,'HumanoidRootPart'); if(not W)then continue end local X=q.GetWeapon(); if(not X)or(not X.Parent)then X=q.GetWeapon()continue end local Y=A(V,'Appearance'); Y=(Y and Y:GetChildren())or{} if M.Value then local Z=N.Value local _, aa, ab=q.ResolveTeleportDistance(V,Z,15,{Ignore=Y,ParentMatching=true}); if(not _)then continue end R.CFrame=CFrame.lookAt(aa,W.Position); else if not r.IsPartVisible(W,X.Muzzle.Position,{Ignore=Y,ParentMatching=true})then continue end end X.Event:FireServer(W.Position); task.wait(X:GetAttribute'Cooldown'*0.8) end end end):Start() end) end do r.AssertFunctions({'drawing'},function() local aa={}; local ab=K.Visuals_ZombieESP:CreateToggle("ZombieTextToggle",{Title="Zombie Text ESP",Description="shows important information about zombies through walls",Default=false}) local L=K.Visuals_ZombieESP:CreateColorpicker("ZombieTextColor",{Title="Text Color",Default=Color3.fromRGB(85,255,0)}) ab:OnChanged(function(M) if(not M)then m.TerminateById'ZombieTextToggle' return end m.New('ZombieTextToggle',function(N) while F.Loaded and task.wait()do for O,P in q.GetEnemies()do if aa[P]then continue end local Q=A(P,'HumanoidRootPart'); if(not Q)then continue end local R=r.SmartDraw('Text',{ Visible=false, Center=true, Outline=true, },function(R,S) if(not Q.Parent)then return end local T=A(P,'Humanoid'); if(not T)then return end local U,V=u.CurrentCamera:WorldToViewportPoint(Q.Position) R.Visible=V and ab.Value and T.Health>0; if V then local W=math.ceil(z:DistanceFromCharacter(Q.Position)or 0) R.Position=Vector2.new(U.X,U.Y) R.Text=string.format('Name: %s | Health: %s%% | Distance: %s', tostring(P.Name), tostring(math.floor(T.Health*100/T.MaxHealth)), tostring(W)) R.Color=L.Value end end) N:AddObject(P.AncestryChanged:Once(function() local S=aa[P]; if S then pcall(S.Destroy,S); aa[P]=nil end end)); aa[P]=R end end end):AddObject(function() for N,O in aa do pcall(O.Destroy,O)aa[N]=nil end end):Start() end) local M={}; local N=K.Visuals_PowerupESP:CreateToggle("PowerupTextToggle",{Title="Powerup Text ESP",Description="shows powerups through walls",Default=false}) local O=K.Visuals_PowerupESP:CreateColorpicker("PowerupTextColor",{Title="Text Color",Default=Color3.fromRGB(0,170,255)}) N:OnChanged(function(P) if(not P)then m.TerminateById'PowerupTextToggle' return end m.New('PowerupTextToggle',function(Q) while F.Loaded and task.wait()do for R,S in q.GetPowerups()do if M[S]then continue end local T=A(S,'Root'); if(not T)then continue end local U=r.SmartDraw('Text',{ Visible=false, Center=true, Outline=true, },function(U,V) if(not T.Parent)then return end local W,X=u.CurrentCamera:WorldToViewportPoint(T.Position) U.Visible=X and N.Value; if X then local Y=math.ceil(z:DistanceFromCharacter(T.Position)or 0) U.Position=Vector2.new(W.X,W.Y) U.Text=string.format('Powerup | Distance: %s', tostring(Y)) U.Color=O.Value end end) Q:AddObject(S.AncestryChanged:Once(function() local V=M[S]; if V then pcall(V.Destroy,V); M[S]=nil end end)); M[S]=U end end end):AddObject(function() for Q,R in M do pcall(R.Destroy,R)M[Q]=nil end end):Start() end) end,function(aa) K.Visuals_ZombieESP:CreateParagraph("AssetFuncVisuals_ZombieESP",{ Title="Unsupported Executor", TitleAlignment=Enum.TextXAlignment.Center, Content=string.format('your executor lacks features required for this feature: %s', tostring(table.concat(aa,", "))), ContentAlignment=Enum.TextXAlignment.Center }); K.Visuals_PowerupESP:CreateParagraph("AssetFuncVisuals_PowerupESP",{ Title="Unsupported Executor", TitleAlignment=Enum.TextXAlignment.Center, Content=string.format('your executor lacks features required for this feature: %s', tostring(table.concat(aa,", "))), ContentAlignment=Enum.TextXAlignment.Center }); end) end do local aa=K.Misc_Movement:CreateSlider("WalkSpeedSlider",{Title="Walk Speed",Description="studs per second",Default=16,Min=1,Max=256,Rounding=0}) local ab=K.Misc_Movement:CreateSlider("JumpSpeedSlider",{Title="Jump Power",Default=50,Min=1,Max=256,Rounding=0}) aa:OnChanged(function(L) m.TerminateById'WalkSpeedSlider' m.New('WalkSpeedSlider',function() z.Character.Humanoid.WalkSpeed=L end):AddObject(z.Character.Humanoid:GetPropertyChangedSignal'WalkSpeed':Connect(function() z.Character.Humanoid.WalkSpeed=L end)):Start() end) ab:OnChanged(function(L) m.TerminateById'JumpSpeedSlider' m.New('JumpSpeedSlider',function() z.Character.Humanoid.UseJumpPower=true z.Character.Humanoid.JumpPower=L end):AddObject(z.Character.Humanoid:GetPropertyChangedSignal'JumpPower':Connect(function() z.Character.Humanoid.UseJumpPower=true z.Character.Humanoid.JumpPower=L end)):Start() end) local L=K.Misc_Others:CreateToggle("AntiAFKToggle",{Title="Anti AFK",Description="prevents you from being kicked",Default=false}); L:OnChanged(r.AntiAFK) r.AssertFunctions({'firetouchinterest'},function() local M=K.Misc_Others:CreateToggle("AutoPickUpPowerups",{Title="Pickup Powerups",Description="automatically picks up powerups",Default=false}); local function N(O) local P=B(O,'TouchTransmitter',true); if P then firetouchinterest(P.Parent,z.Character.PrimaryPart,0) end end M:OnChanged(function(O) if not O then m.TerminateById"AutoPickUpPowerups" return end m.New("AutoPickUpPowerups",function(P) while F.Loaded and task.wait(1)do for Q,R in q.GetPowerups()do N(R) end end end):Start() end) end,function(M) K.Misc_Others:CreateParagraph("AssetFuncVisuals_AutoPickUpPowerups",{ Title="Unsupported Executor", TitleAlignment=Enum.TextXAlignment.Center, Content=string.format('your executor lacks features required for this feature: %s', tostring(table.concat(M,", "))), ContentAlignment=Enum.TextXAlignment.Center }); end) K.Misc_Others:CreateButton{ Title="Infinite Yield", Description="loads infinite yeild (fly, ws, jp..)", Callback=function() loadstring( game:HttpGet('https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source',true) )() end } end do G:SetLibrary(F) H:SetLibrary(F) G:IgnoreThemeSettings() G:SetIgnoreIndexes{} H:SetFolder"StreliziaScriptHub" G:SetFolder("StreliziaScriptHub/"..game.PlaceId) H:BuildInterfaceSection(J.Settings) G:BuildConfigSection(J.Settings) I:SelectTab(1) F:Notify{ Title="strelizia.cc", Content="script loaded, enjoy <3", Duration=5 } F:ToggleTransparency(false) G:LoadAutoloadConfig() F.OnUnload:Connect(function() m.TerminateAll() local aa=A(y,'UIToggle') if aa then aa:Destroy()end; end) do m.New('DiscordJoinPrompt',function(aa) local ab=120 while true do local L,M=pcall(isfile,'StreliziaJoinedDiscord'); if L and M==true then break end; task.wait(ab) ab=ab*3 local N=I:Dialog{ Title="Discord", Content="Hey! Want to join our Discord for tons of giveaways, stay updated on script status, and hang out with the community?", Buttons={ { Title="Sure", Callback=function()r.PromptDiscordJoin('Vf4Wu3Cft7',true)pcall(writefile,'StreliziaJoinedDiscord','true')end }, { Title="No", Callback=function()end } } } N.Closed:Wait() end aa:Terminate() end):Start() end end end, Properties={ Name="Init" }, Reference=1, Children={ { ClassName="ModuleScript", Closure=function()local a={} function a.SetupLazyLoader(aa,ab) local b={}; for c,e in aa:GetChildren()do b[e.Name]=e end setmetatable(ab,{ __index=function(c,e) local f=b[e]; assert(f,string.format('[Library]: Cannot find module %s in %s',e,script.Name)) local g,i=pcall(require,f) assert(g,string.format('[Library]: Failed to Initalize Module %s in %s: %s',e,script.Name,tostring(i))) assert(typeof(i)=='function',string.format('[Library]: Module %s is NOT a Function',e)) local m,n=pcall(i,a) assert(m,string.format('[Library]: Failed to Load Module %s in %s: %s',e,script.Name,tostring(n))) rawset(c,e,n) return n end, }) end a.SetupLazyLoader(script,a) return a end, Properties={ Name="Library" }, Reference=2, Children={ { ClassName="ModuleScript", Closure=function()return function(a) local aa={}; a.SetupLazyLoader(script,aa) return aa end end, Properties={ Name="Functions" }, Reference=3, Children={ { ClassName="ModuleScript", Closure=function()return function(a) local aa={}; a.SetupLazyLoader(script,aa) return aa end end, Properties={ Name="Generic" }, Reference=4, Children={ { Closure=function()return function(a) local aa={}; return function(ab) local b=aa[tostring(ab)]; if b then return b end local c=(ab-ab%60)/60 ab=ab-c*60 local e=(c-c%60)/60 c=c-e*60 local f=string.format("%02i",e)..":"..string.format("%02i",c)..":"..string.format("%02i",ab) aa[tostring(ab)]=f return f end end end, Properties={ Name="FormatHms" }, Reference=8, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local ab=aa.Players local b=aa.Workspace local c=ab.LocalPlayer local e=b.CurrentCamera local f=b.Raycast return function(m,n,p) local q=c.Character; if(not q)then return false end p=p or{} local r=p.Ignore or{} local s=p.ParentMatching or false local u=n or e.CFrame.Position local y=(m.Position-u).Unit; local z=RaycastParams.new(); z.FilterType=Enum.RaycastFilterType.Exclude z:AddToFilter(c.Character) for A,B in r do if(typeof(B)~='Instance')then continue end z:AddToFilter(B) end local A=f(b,u,y*1000,z); if A and A.Instance==m then return true end if s and A.Instance.Parent==m.Parent then return true end return false end end end, Properties={ Name="IsPartVisible" }, Reference=17, ClassName="ModuleScript" }, { ClassName="ModuleScript", Closure=function()return function(a) local aa=game.FindFirstChild local ab={}; local function b(c,e) local f=(not e and ab[c]); if f then return f end;local m, n=pcall(require(c),a); ab[c]=n return n end return function(c,e,f,m) local n=true local p={ [true]=e, [false]=f } for q,r in c do local s=aa(script,r) if(not s)then continue end n=b(s,m); if(not n)then break end end if p[n]then pcall(p[n],c) end return n end end end, Properties={ Name="AssertFunctions" }, Reference=27, Children={ { Closure=function()Instance.new"Part" return function(a) local aa=firetouchinterest if not aa then return false end return true end end, Properties={ Name="firetouchinterest" }, Reference=36, ClassName="ModuleScript" }, { Closure=function()local a={1,2,3,'Hi','Test'} local function aa() local ab,b,c,e=table.unpack(a) return table.pack(ab,b,c,e) end return function(ab) local b=debug and debug.getupvalues or getupvalues; if(not b)then return false end local c,e=pcall(b,aa) if not c or typeof(e)~='table'or typeof(e[1])~='table'or(table.unpack(e[1])~=table.unpack(a))then return false end return true end end, Properties={ Name="getupvalues" }, Reference=32, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=Drawing; if(not aa)or(not aa.new)then return false end local ab,b=pcall(aa.new,'Circle'); if(not ab)or typeof(b)~='DrawingObject'then return false end local c, e=pcall(b.Destroy,b) if(not c)then return false end return true end end, Properties={ Name="drawing" }, Reference=35, ClassName="ModuleScript" }, { Closure=function()local function a() return nil end return function(aa) local c=newcclosure if not c then return false end local e,f=pcall(c,a) if not e or typeof(f)~="function"or f==a then return false end return true end end, Properties={ Name="newcclosure" }, Reference=33, ClassName="ModuleScript" }, { Closure=function()local function a() local aa="Constant" return aa end return function(aa) local c=(debug and debug.getconstants)or getconstants if not c then return false end local e,f=pcall(c,a) if not e or(typeof(f)~='table')or#f~=1 or f[1]~='Constant'then return false end return true end end, Properties={ Name="getconstants" }, Reference=29, ClassName="ModuleScript" }, { Closure=function()local a=function()return end; return function(aa) local c=islclosure if not c then return false end local e,f=pcall(c,a); if not e or f~=true then return false end local m=print; if(not m)then return false end local n,p=pcall(c,m); if not n or p==true then return false end return true end end, Properties={ Name="islclosure" }, Reference=31, ClassName="ModuleScript" }, { Closure=function()local a=setmetatable({},{ __index=function(a,aa) return false end, }) local function aa(c,m) return c[m] end return function(c) local m=hookmetamethod; if(not m)then return false end local n, p=pcall(m,a,"__index",function()return true end); if(not n)then return false end local q,r=pcall(aa,a,'Test'); if(not q)or r~=true then return false end return true end end, Properties={ Name="hookmetamethod" }, Reference=34, ClassName="ModuleScript" }, { Closure=function()local a=setmetatable({},{}) local aa=setmetatable({},{__metatable="locked"}) local c=getmetatable(a) return function(m) local q=getrawmetatable if not q then return false end local r,s=pcall(q,a); if(not r)or s~=c then return false end local u,y=pcall(q,aa); if(not u)or(y.__metatable~='locked')then return false end return true end end, Properties={ Name="getrawmetatable" }, Reference=30, ClassName="ModuleScript" }, { Closure=function()local a={ Param={ Function=function(a,aa,c,m)local q=5;return q end, Expected={source="=";what="Lua";numparams=4;func=nil;short_src="";name="Function";is_vararg=0;nups=0;} }, Lua={ Function=function()return'Hi i am lua indeed'end, Expected={source="=";what="Lua";numparams=0;func=nil;short_src="";name="Function";is_vararg=0;nups=0;} }, C={ Function=print or function()return'well this aint no C'end, Expected={source="=[C]";what="C";numparams=0;func=nil;short_src="[C]";currentline=-1;name="print";is_vararg=1;nups=0;} } } return function(aa) local c=(debug and debug.getinfo)or getinfo if not c then return false end for m,q in a do q.Expected.func=q.Function; local u,y=pcall(c,q.Function); if not u or(typeof(y)~='table')then return false end for z,A in q.Expected do if(y[z]==A)then continue end return false end end return true end end, Properties={ Name="debug_getinfo" }, Reference=28, ClassName="ModuleScript" } } }, { Closure=function()return function(a) return function(...) local aa={} for c,m in pairs{...}do for q,u in m do aa[q]=u end end return aa end end end, Properties={ Name="JoinDictionaries" }, Reference=24, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=a.Libraries.Generic.Cache local m=aa.MarketplaceService local q=c.Get"GameInfoCache":SetKeyExpiry(180) return function(u) if q[tostring(u)]then return q[tostring(u)] end local y,z=pcall(m.GetProductInfo,m,u,Enum.InfoType.Asset) if y then q[tostring(u)]=z return z end return nil end end end, Properties={ Name="GetGameInfo" }, Reference=5, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=aa.Players local m=c.LocalPlayer return function(q) local u=m.Character; if(not u)or(not u.HumanoidRootPart)then return end u.HumanoidRootPart.Anchored=q end end end, Properties={ Name="SetPlayerAnchored" }, Reference=11, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services; local c=aa.Players local m=c.LocalPlayer local q=m:GetMouse() return function() return Vector2.new(q.X,q.Y) end end end, Properties={ Name="GetMousePosition" }, Reference=16, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa={} return function(c) local m=tostring(c); if aa[m]then return aa[m]end local q=m:reverse():gsub("%d%d%d","%1,"):reverse():gsub("^,",""); aa[m]=q return q end end end, Properties={ Name="CommaNumber" }, Reference=13, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa; local c=a.Libraries.Generic.Services local m=c.VirtualUser local q=c.Players local u=Random.new() local y=q.LocalPlayer return function(z) if z==false then if aa then aa:Disconnect()end; return true end if aa then return true end aa=y.Idled:Connect(function() local A=workspace.CurrentCamera m:Button2Down(Vector2.new(0,0),A.CFrame) task.wait(u:NextNumber(0,1)) m:Button2Up(Vector2.new(0,0),A.CFrame) end) end end end, Properties={ Name="AntiAFK" }, Reference=9, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services; local c=aa.Stats local m=c.Network.ServerStatsItem["Data Ping"] return function()local q, u=pcall(m.GetValue,m); return u or 0 end end end, Properties={ Name="GetPing" }, Reference=38, ClassName="ModuleScript" }, { Closure=function()return function(a) return function(aa) local c=0; for m,q in aa do c=c+1 end return c end end end, Properties={ Name="GetTableSize" }, Reference=6, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Cache local c=aa.Get'ScriptCache' return function() local m=c.InitTime if(not m)then return 0 end return DateTime.now().UnixTimestamp-m end end end, Properties={ Name="GetUptime" }, Reference=7, ClassName="ModuleScript" }, { Closure=function()return function(a) return function(aa,c) local m=c.Retries or 2; local q=c.Arguments or{}; local u=c.RetryDelay or 0; local y,z; for A=1,m do y,z=pcall(aa,unpack(q)); if y and z==true then break end task.wait(u) end return y,z end end end, Properties={ Name="Retry" }, Reference=21, ClassName="ModuleScript" }, { Closure=function()return function(a) return function(...) local aa={}; for c,m in{...}do for q,u in m do table.insert(aa,u) end end end end end, Properties={ Name="JoinArrays" }, Reference=25, ClassName="ModuleScript" }, { Closure=function()return function(a) return function(aa,c,m,q) local u=c or 3 local y=m or 1 local z=q or{} local A=0; while A<u do local B,D=pcall(aa,unpack(z)) if B and D then return true end A=A+y;task.wait(y) end return false end end end, Properties={ Name="Timeout" }, Reference=12, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services; local c=aa.GuiService return function() local m=workspace.CurrentCamera local q=m.ViewportSize local u,y=c:GetGuiInset() return Vector2.new(q.X,q.Y),u,y end end end, Properties={ Name="GetScreenSize" }, Reference=19, ClassName="ModuleScript" }, { Closure=function()return function(a) return function(aa,c) local m=Instance.new(aa); for q,u in c do m[q]=u end return m end end end, Properties={ Name="CreateInstance" }, Reference=18, ClassName="ModuleScript" }, { Closure=function() return function(a) local aa=a.Functions.Generic.HttpRequest local c=a.Libraries.Generic.Services local m=c.HttpService return function(q,u) if u then setclipboard("https://www.discord.gg/"..q) end if(not aa)then return false end aa{ Url="http://127.0.0.1:6463/rpc?v=1", Method="POST", Headers={ ["Content-Type"]="application/json",Origin= "https://discord.com" }, Body=m:JSONEncode{ cmd="INVITE_BROWSER", args={ code=q }, nonce=m:GenerateGUID(false) } } return true end end end, Properties={ Name="PromptDiscordJoin" }, Reference=15, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Functions.Generic.GetPing; return function(c,m) local q=aa(); if q<c then return end while aa()>m do task.wait(0.2) end end end end, Properties={ Name="HaltLatency" }, Reference=37, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=Drawing; local m=aa.RunService return function(q,u,y) if(not c)then return end local z=c.new(q); local A={Drawing=z} for B,D in u do z[B]=D end A.Updater=m.Heartbeat:Connect(function(B) y(z,B) end) function A.Destroy() if(not A.Drawing)then return end pcall(A.Drawing.Destroy,A.Drawing) pcall(A.Updater.Disconnect,A.Updater); A.Drawing=nil A.Updater=nil return end return A end end end, Properties={ Name="SmartDraw" }, Reference=26, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=aa.HttpService local function m(q,u) u=u or{} local y=typeof(q); if y=='table'then if u[q]then return u[q] else local z={} u[q]=z for A,B in next,q do z[m(A,u)]=m(B,u) end; setmetatable(z,m(getmetatable(q),u)) return z end else return q end end return function(q,u) if u then return(m(q)) else return c:JSONDecode(c:JSONEncode(q)) end end end end, Properties={ Name="TableClone" }, Reference=23, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Functions.Generic.OutputMessage return function(c) local m=os.clock(); return function() local q=math.ceil((os.clock()-m)*1000); if q>250 and a.Debug then aa('Warn',string.format('Benchmark %s took long to complete (%sms)', tostring(c), tostring(q))) end return q end end end end, Properties={ Name="Benchmark" }, Reference=22, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa={ Info='🔵', Warn='🟠', Success='🟢', Error='🔴' } local function c(m,q) local u=os.date"*t" string.format("%s:%s:%s",u.hour,u.min,u.sec) print(string.format("%s | [Library]: %s",aa[m],q)) end return c end end, Properties={ Name="OutputMessage" }, Reference=20, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=game.FindFirstChild return function(c) local m=c.Character if(not m)then return false end local q=m.PrimaryPart if(not q)then return false end local u=aa(m,"Humanoid") if(not u)or(u.Health<=0)then return false end return true end end end, Properties={ Name="IsAlive" }, Reference=10, ClassName="ModuleScript" }, { Closure=function()return function(a) return(syn and syn.request)or(http and http.request)or httprequest or request or function()return end end end, Properties={ Name="HttpRequest" }, Reference=14, ClassName="ModuleScript" } } }, { ClassName="ModuleScript", Closure=function()return function(a) local aa={}; a.SetupLazyLoader(script,aa) return aa end end, Properties={ Name="Special" }, Reference=39, Children={ { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=aa.Workspace local m=game.FindFirstChild local q=game.GetChildren return function() local u=m(c,'Game'); if u then local y=m(u,'Powerups') return(y and q(y))or nil end return nil end end end, Properties={ Name="GetPowerups" }, Reference=44, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Functions.Generic.IsPartVisible local c=game.FindFirstChild return function(m,q,u,y) local z,A=false; local B=0; while B<360 do if(not m.Parent)then break end local D=c(m,'HumanoidRootPart') if(not D)then break end local E=D.Position+Vector3.new(math.cos(B)*q,0,math.sin(B)*q); if aa(m.Head,E,y)then z,A=true,E break end B=B+u task.wait() end return z,A,B end end end, Properties={ Name="ResolveTeleportDistance" }, Reference=43, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=aa.UserInputService local m= aa.CollectionService local q=aa.Players local u=a.Functions.Generic.IsPartVisible local y=a.Functions.Special.GetEnemies local z=q.LocalPlayer local A=game.FindFirstChild local B=game.FindFirstChildWhichIsA local D=z.DistanceFromCharacter local E=workspace.CurrentCamera.WorldToViewportPoint local F=c.GetMouseLocation return function(G) local H,I=G or math.huge; local J=y() if(not J)then return nil end for K,L in J do local M=A(L,'Head') if(not M)then continue end local N=B(L,'Humanoid') if(not N)or(N.Health<=0)then continue end local O=A(L,"Appearance"); O=(O and O:GetChildren())or{} local P=D(z,M.Position) if P>600 then continue end local Q,R=E(workspace.CurrentCamera,M.Position); if(not R)then continue end if(not u(M,z.Character.PrimaryPart.Position,{Ignore=O,ParentMatching=true}))then continue end local S=(F(c)-Vector2.new(Q.X,Q.Y)).Magnitude; if H>S then H=S I=L end end return I,H end end end, Properties={ Name="GetClosestEnemyToMouse" }, Reference=42, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=aa.Workspace local m=game.FindFirstChild local q=game.GetChildren return function() local u=m(c,'Game'); if u then local y=m(u,'Zombies') return(y and q(y))or nil end return nil end end end, Properties={ Name="GetEnemies" }, Reference=40, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Services local c=a.Functions.Generic.IsAlive local m=game.FindFirstChildWhichIsA local q=game.FindFirstChild local u=game.GetAttribute local y=aa.Players local z=y.LocalPlayer return function() if(not c(z))then return nil end local A=z.Character; local B=m(A,'Tool'); if B and q(B,'Event')and u(B,'Damage')then return B end return nil end end end, Properties={ Name="GetWeapon" }, Reference=41, ClassName="ModuleScript" } } } } }, { ClassName="ModuleScript", Closure=function()return function(a) local aa={}; a.SetupLazyLoader(script,aa) return aa end end, Properties={ Name="Libraries" }, Reference=45, Children={ { ClassName="ModuleScript", Closure=function()return function(a) local aa={}; a.SetupLazyLoader(script,aa) return aa end end, Properties={ Name="Special" }, Reference=58, Children={ { Closure=function()return function(a) local aa={} local c=a.Libraries.Generic.Services local m=c.ReplicatedStorage local q=c.Players local u=a.Libraries.Generic.Promise local y=a.Libraries.Generic.Tree local z=a.Functions.Generic.GetTableSize local A=a.Functions.Generic.OutputMessage local function B() local D=q.LocalPlayer local E= D.Character local F={ SomePath=y.Find(m,'Shared/Remotes',1) } return F end local function D(E) local F={} for G,H in E do table.insert(F,u.new(function(I,J) local K,L=pcall(require,H); if K then I(L) else J(tostring(L)) end end):andThen(function(I)aa[G]=I end):catch(function(I) A('Error',string.format('Failed to require Game Module %s: %s', tostring(H.Name), tostring(I))) end)) end u.all(F):await() return aa end local function E() local F=B() if z(F)~=z(aa)then return D(F) end return aa end return table.freeze{ Get=E } end end, Properties={ Name="GameModules" }, Reference=59, ClassName="ModuleScript" } } }, { ClassName="ModuleScript", Closure=function()return function(a) local aa={}; a.SetupLazyLoader(script,aa) return aa end end, Properties={ Name="Generic" }, Reference=46, Children={ { Closure=function()return function(a) local aa={} local c={Fluent= 97404758083545,SaveManager= 132828910264093,ThemeManager= 72525158718178; }; local m=a.Functions.Generic.GetTableSize; local q=a.Libraries.Generic.Promise local u=a.Functions.Generic.OutputMessage local y=function() local y=os.clock() local z={} for A,B in c do table.insert(z,q.new(function(D,E) local F,G=pcall(game.GetObjects,game,"rbxassetid://"..B) if F then if a.Debug then u('Success',string.format('Successfully loaded Interface Module %s: %ss Elapsed', tostring(A), tostring(os.clock()-y))) end D(loadstring(G[1].Source)()) else E(tostring(G)) end end):andThen(function(D) aa[A]=D end):catch(function(D) u('Error',string.format('Failed to load Interface Module %s: %s', tostring(A), tostring(D))) end)) end q.all(z):await() if a.Debug then u('Info',string.format('Took %ss to load Interface Class (%s Modules)', tostring(os.clock()-y), tostring(m(c)))) end return aa end return{ Get=function() if(m(c)~=m(aa))then y() end return aa end, } end end, Properties={ Name="Interface" }, Reference=57, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa={} local c={Delimiter="/"}; local function m(q,u,y) local z=aa[q]; if z then return z end local A=string.split(q,c.Delimiter); for B,D in A do u=u:FindFirstChild(D)or(y and u:WaitForChild(D,y))or nil; if(not u)then return nil end end aa[q]=u return u end function c.SetDelimiter(q) c.Delimiter=q or"/" end function c.Find(q,u,y) local z=m(u,q,y); return z end return c end end, Properties={ Name="Tree" }, Reference=53, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa local function c(m,...) local q=aa aa=nil m(...) aa=q end local function m(...) c(...) while true do c(coroutine.yield()) end end local q={} q.__index=q function q.Disconnect(u) if not u.Connected then return end u.Connected=false if u._signal._handlerListHead==u then u._signal._handlerListHead=u._next else local y=u._signal._handlerListHead while y and y._next~=u do y=y._next end if y then y._next=u._next end end end q.Destroy=q.Disconnect setmetatable(q,{ __index=function(u,y) error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(y)),2) end, __newindex=function(u,y,z) error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(y)),2) end, }) local y={} y.__index=y function y.new() return setmetatable({_handlerListHead=false,_proxyHandler=nil,_yieldedThreads=nil},y) end function y.Wrap(z) assert(typeof(z)=="RBXScriptSignal","Argument #1 to Signal.Wrap must be a RBXScriptSignal; got "..typeof(z)) local A=y.new() A._proxyHandler=z:Connect(function(...)A:Fire(...)end) return A end function y.Is(z) return type(z)=="table"and getmetatable(z)==y end function y.Connect(z,A) local B=setmetatable({Connected=true,_signal=z,_fn=A,_next=false},q) if z._handlerListHead then B._next=z._handlerListHead z._handlerListHead=B else z._handlerListHead=B end return B end function y.ConnectOnce(z,A)return z:Once(A)end function y.Once(z,A) local B local D=false B=z:Connect(function(...) if D then return end D=true B:Disconnect() A(...) end) return B end function y.GetConnections(z) local A={} local B=z._handlerListHead while B do table.insert(A,B) B=B._next end return A end function y.DisconnectAll(z) local A=z._handlerListHead while A do A.Connected=false A=A._next end z._handlerListHead=false local B=rawget(z,"_yieldedThreads") if B then for D in B do if coroutine.status(D)=="suspended"then warn(debug.traceback(D,"signal disconnected; yielded thread cancelled",2)) task.cancel(D) end end table.clear(z._yieldedThreads) end end function y.Fire(z,...) local A=z._handlerListHead while A do if A.Connected then if not aa then aa=coroutine.create(m) end task.spawn(aa,A._fn,...) end A=A._next end end function y.FireDeferred(z,...) local A=z._handlerListHead while A do local B=A task.defer(function(...) if B.Connected then B._fn(...)end end,...) A=A._next end end function y.Wait(z) local A=rawget(z,"_yieldedThreads") if not A then A={} rawset(z,"_yieldedThreads",A) end local B=coroutine.running() A[B]=true z:Once(function(...) A[B]=nil task.spawn(B,...) end) return coroutine.yield() end function y.Destroy(z) z:DisconnectAll() local A=rawget(z,"_proxyHandler") if A then A:Disconnect()end end setmetatable(y,{ __index=function(z,A) error(("Attempt to get Signal::%s (not a valid member)"):format(tostring(A)),2) end, __newindex=function(z,A,B) error(("Attempt to set Signal::%s (not a valid member)"):format(tostring(A)),2) end, }) return table.freeze{new=y.new,Wrap=y.Wrap,Is=y.Is} end end, Properties={ Name="Signal" }, Reference=52, ClassName="ModuleScript" }, { ClassName="ModuleScript", Closure=function()return function(a) local aa=game:GetService"HttpService" local c=require(script.Metatable) local m={can_spawn=true}; local q={} local y=function(y,A) local B=aa:GenerateGUID(false); local D={} D.running=false D.func=m.can_spawn and A or function()end D.index=y D.creation=DateTime.now().UnixTimestamp D.children={} q[B]=setmetatable(D,{ __index=c, __tostring=function() return string.format('Thread(%s)', tostring(D.running and"Running"or"Stopped")) end, }) return D end local A=function() for A,B in q do B:Terminate() q[A]=nil end end local B=function(B) for D,E in q do if E.index~=B then continue end E:Terminate() q[D]=nil end end local D=function(D,E) m[D]=E end return table.freeze{ New=y, TerminateAll=A, TerminateById=B, SetOption=D } end end, Properties={ Name="Threading" }, Reference=55, Children={ { Closure=function()local a={} a.__index=a function a.Terminate(aa) pcall(task.cancel,aa.func) for c,m in pairs(aa.children)do if typeof(m)=='RBXScriptConnection'then pcall(m.Disconnect,m) elseif(typeof(m)=='function')then pcall(task.spawn,m) elseif typeof(m)=='table'then local q=rawget(m,'Destroy')or rawget(m,'Disconnect'); if q then pcall(task.spawn,q,m) end elseif(pcall(function()return m.Destroy end))then pcall(m.Destroy,m) end aa.children[c]=nil end aa.running=false end function a.Start(aa,...) local c,m=pcall(task.spawn,aa.func,aa,...) if(not c)then warn(string.format('Failed to start Thread %s (%s)',aa.index,tostring(m))) end aa.func=m aa.running=true return aa end function a.AddObject(aa,c) table.insert(aa.children,c) return aa end function a.GetAge(aa) return DateTime.now().UnixTimestamp-aa.creation end return a end, Properties={ Name="Metatable" }, Reference=56, ClassName="ModuleScript" } } }, { Closure=function()return function(a) local aa={_cached={}}; aa.__index=aa function aa.Get(c) if aa._cached[c]then return aa._cached[c] else local m=setmetatable({_settings={}},{ __index=aa, __newindex=function(m,q,y) rawset(m,q,y) local A=m._settings.expiry if A then task.delay(A,rawset,m,q,nil) end end, }) aa._cached[c]=m return m end end function aa.SetKeyExpiry(c,m) c._settings.expiry=tonumber(m) return c end function aa.Clear(c) for m,q in pairs(c)do if m=='_settings'then continue end c[m]=nil end return c end return aa end end, Properties={ Name="Cache" }, Reference=50, ClassName="ModuleScript" }, { Closure=function() return function(a) return setmetatable({},{ __index=function(aa,c) local m,q=pcall(game.GetService,game,c); if m then local y=cloneref(q) rawset(aa,c,y) return y end return nil end, }) end end, Properties={ Name="Services" }, Reference=49, ClassName="ModuleScript" }, { Closure=function() return function(a) return{ LRM_IsUserPremium=LRM_IsUserPremium or true, LRM_LinkedDiscordID=LRM_LinkedDiscordID or 1132756183229419661, LRM_ScriptName=LRM_ScriptName or"strelizia.cc", LRM_TotalExecutions=LRM_TotalExecutions or 5, LRM_SecondsLeft=LRM_SecondsLeft or 300, LRM_UserNote=LRM_UserNote or"Developer | Premium | Lifetime", LRM_ScriptVersion=LRM_ScriptVersion or"0.0.0.1" } end end, Properties={ Name="LRM_Variables" }, Reference=47, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=game:GetService"RunService" local c=newproxy() local m=newproxy() local q=table.freeze{"Destroy","Disconnect","destroy","disconnect"} local function y(A,B) local D=typeof(A) if D=="function"then return c elseif D=="thread"then return m end if B then return B end if D=="Instance"then return"Destroy" elseif D=="RBXScriptConnection"then return"Disconnect" elseif D=="table"then for E,F in q do if typeof(A[F])=="function"then return F end end end error(string.format('failed to get cleanup function for object %s: %s',tostring(D),tostring(A)),3) end local function A(B) if typeof(B)~="table" or typeof(B.getStatus)~="function" or typeof(B.finally)~="function" or typeof(B.cancel)~="function" then error("did not receive a promise as an argument",3) end end local B={} B.__index=B function B.new() local D=setmetatable({},B) D._objects={} D._cleaning=false return D end function B.Add(D,E,F) if D._cleaning then error("cannot call trove:Add() while cleaning",2) end local G=y(E,F) table.insert(D._objects,{E,G}) return E end function B.Clone(D,E) if D._cleaning then error("cannot call trove:Clone() while cleaning",2) end return D:Add(E:Clone()) end function B.Construct(D,E,...) if D._cleaning then error("Cannot call trove:Construct() while cleaning",2) end local F local G=type(E) if G=="table"then F=E.new(...) elseif G=="function"then F=E(...) end return D:Add(F) end function B.Connect(D,E,F) if D._cleaning then error("Cannot call trove:Connect() while cleaning",2) end return D:Add(E:Connect(F)) end function B.BindToRenderStep(D,E,F,G) if D._cleaning then error("cannot call trove:BindToRenderStep() while cleaning",2) end aa:BindToRenderStep(E,F,G) D:Add(function() aa:UnbindFromRenderStep(E) end) end function B.AddPromise(D,E) if D._cleaning then error("cannot call trove:AddPromise() while cleaning",2) end A(E) if E:getStatus()=="Started"then E:finally(function() if D._cleaning then return end D:_findAndRemoveFromObjects(E,false) end) D:Add(E,"cancel") end return E end function B.Remove(D,E) if D._cleaning then error("cannot call trove:Remove() while cleaning",2) end return D:_findAndRemoveFromObjects(E,true) end function B.Extend(D) if D._cleaning then error("cannot call trove:Extend() while cleaning",2) end return D:Construct(B) end function B.Clean(D) if D._cleaning then return end D._cleaning=true for E,F in D._objects do D:_cleanupObject(F[1],F[2]) end table.clear(D._objects) D._cleaning=false end function B.WrapClean(D) return function() D:Clean() end end function B._findAndRemoveFromObjects(D,E,F) local G=D._objects for H,I in G do if I[1]==E then local J=#G G[H]=G[J] G[J]=nil if F then D:_cleanupObject(I[1],I[2]) end return true end end return false end function B._cleanupObject(D,E,F) if F==c then task.spawn(E) elseif F==m then pcall(task.cancel,E) else E[F](E) end end function B.AttachToInstance(D,E) if D._cleaning then error("cannot call trove:AttachToInstance() while cleaning",2) elseif not E:IsDescendantOf(game)then error("instance is not a descendant of the game hierarchy",2) end return D:Connect(E.Destroying,function() D:Destroy() end) end function B.Destroy(D) D:Clean() end return{ new=B.new, } end end, Properties={ Name="Trove" }, Reference=54, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa="Non-promise value passed into %s at index %s" local c="Please pass a list of promises to %s" local m="Please pass a handler function to %s!" local q={__mode="k"} local function y(A) if type(A)=="function"then return true end if type(A)=="table"then local B=getmetatable(A) if B and type(rawget(B,"__call"))=="function"then return true end end return false end local function A(B,D) local E={} for F,G in ipairs(D)do E[G]=G end return setmetatable(E,{ __index=function(F,G) error(string.format("%s is not in %s!",G,B),2) end, __newindex=function() error(string.format("Creating new members in %s is not allowed!",B),2) end, }) end local B do B={ Kind=A("Promise.Error.Kind",{ "ExecutionError", "AlreadyCancelled", "NotResolvedInTime", "TimedOut", }), } B.__index=B function B.new(D,E) D=D or{} return setmetatable({ error=tostring(D.error)or"[This error has no error text.]", trace=D.trace, context=D.context, kind=D.kind, parent=E, createdTick=os.clock(), createdTrace=debug.traceback(), },B) end function B.is(D) if type(D)=="table"then local E=getmetatable(D) if type(E)=="table"then return rawget(D,"error")~=nil and type(rawget(E,"extend"))=="function" end end return false end function B.isKind(D,E) assert(E~=nil,"Argument #2 to Promise.Error.isKind must not be nil") return B.is(D)and D.kind==E end function B.extend(D,E) E=E or{} E.kind=E.kind or D.kind return B.new(E,D) end function B.getErrorChain(D) local E={D} while E[#E].parent do table.insert(E,E[#E].parent) end return E end function B.__tostring(D) local E={ string.format("-- Promise.Error(%s) --",D.kind or"?"), } for F,G in ipairs(D:getErrorChain())do table.insert( E, table.concat({ G.trace or G.error, G.context, },"\n") ) end return table.concat(E,"\n") end end local function D(...) return select("#",...),{...} end local function E(F,...) return F,select("#",...),{...} end local function F(G) assert(G~=nil,"traceback is nil") return function(H) if type(H)=="table"then return H end return B.new{ error=H, kind=B.Kind.ExecutionError, trace=debug.traceback(tostring(H),2), context="Promise created at:\n\n"..G, } end end local function G(H,I,...) return E(xpcall(I,F(H),...)) end local function H(I,J,K,L) return function(...) local M,N,O=G(I,J,...) if M then K(unpack(O,1,N)) else L(O[1]) end end end local function I(J) return next(J)==nil end local J={ Error=B, Status=A("Promise.Status",{"Started","Resolved","Rejected","Cancelled"}), _getTime=os.clock, _timeEvent=game:GetService"RunService".Heartbeat, _unhandledRejectionCallbacks={}, } J.prototype={} J.__index=J.prototype function J._new(K,L,M) if M~=nil and not J.is(M)then error("Argument #2 to Promise.new must be a promise or nil",2) end local N={ _thread=nil, _source=K, _status=J.Status.Started, _values=nil, _valuesLength=-1, _unhandledRejection=true, _queuedResolve={}, _queuedReject={}, _queuedFinally={}, _cancellationHook=nil, _parent=M, _consumers=setmetatable({},q), } if M and M._status==J.Status.Started then M._consumers[N]=true end setmetatable(N,J) local function O(...) N:_resolve(...) end local function P(...) N:_reject(...) end local function Q(R) if R then if N._status==J.Status.Cancelled then R() else N._cancellationHook=R end end return N._status==J.Status.Cancelled end N._thread=coroutine.create(function()local R, S, T=G(N._source,L,O,P,Q) if not R then P(T[1]) end end) task.spawn(N._thread) return N end function J.new(K) return J._new(debug.traceback(nil,2),K) end function J.__tostring(K) return string.format("Promise(%s)",K._status) end function J.defer(K) local L=debug.traceback(nil,2) local M M=J._new(L,function(N,O,P) local Q Q=J._timeEvent:Connect(function() Q:Disconnect()local R, S, T=G(L,K,N,O,P) if not R then O(T[1]) end end) end) return M end J.async=J.defer function J.resolve(...) local K,L=D(...) return J._new(debug.traceback(nil,2),function(M) M(unpack(L,1,K)) end) end function J.reject(...) local K,L=D(...) return J._new(debug.traceback(nil,2),function(M,N) N(unpack(L,1,K)) end) end function J._try(K,L,...) local M,N=D(...) return J._new(K,function(O) O(L(unpack(N,1,M))) end) end function J.try(K,...) return J._try(debug.traceback(nil,2),K,...) end function J._all(K,L,M) if type(L)~="table"then error(string.format(c,"Promise.all"),3) end for N,O in pairs(L)do if not J.is(O)then error(string.format(aa,"Promise.all",tostring(N)),3) end end if#L==0 or M==0 then return J.resolve{} end return J._new(K,function(N,O,P) local Q={} local R={} local S=0 local T=0 local U=false local function V() for W,X in ipairs(R)do X:cancel() end end local function W(X,...) if U then return end S=S+1 if M==nil then Q[X]=... else Q[S]=... end if S>=(M or#L)then U=true N(Q) V() end end P(V) for X,Y in ipairs(L)do R[X]=Y:andThen(function(...) W(X,...) end,function(...) T=T+1 if M==nil or#L-T<M then V() U=true O(...) end end) end if U then V() end end) end function J.all(K) return J._all(debug.traceback(nil,2),K) end function J.fold(K,L,M) assert(type(K)=="table","Bad argument #1 to Promise.fold: must be a table") assert(y(L),"Bad argument #2 to Promise.fold: must be a function") local N=J.resolve(M) return J.each(K,function(O,P) N=N:andThen(function(Q) return L(Q,O,P) end) end):andThen(function() return N end) end function J.some(K,L) assert(type(L)=="number","Bad argument #2 to Promise.some: must be a number") return J._all(debug.traceback(nil,2),K,L) end function J.any(K) return J._all(debug.traceback(nil,2),K,1):andThen(function(L) return L[1] end) end function J.allSettled(K) if type(K)~="table"then error(string.format(c,"Promise.allSettled"),2) end for L,M in pairs(K)do if not J.is(M)then error(string.format(aa,"Promise.allSettled",tostring(L)),2) end end if#K==0 then return J.resolve{} end return J._new(debug.traceback(nil,2),function(L,M,N) local O={} local P={} local Q=0 local function R(S,...) Q=Q+1 O[S]=... if Q>=#K then L(O) end end N(function() for S,T in ipairs(P)do T:cancel() end end) for S,T in ipairs(K)do P[S]=T:finally(function(...) R(S,...) end) end end) end function J.race(K) assert(type(K)=="table",string.format(c,"Promise.race")) for L,M in pairs(K)do assert(J.is(M),string.format(aa,"Promise.race",tostring(L))) end return J._new(debug.traceback(nil,2),function(L,M,N) local O={} local P=false local function Q() for R,S in ipairs(O)do S:cancel() end end local function R(S) return function(...) Q() P=true return S(...) end end if N(R(M))then return end for S,T in ipairs(K)do O[S]=T:andThen(R(L),R(M)) end if P then Q() end end) end function J.each(K,L) assert(type(K)=="table",string.format(c,"Promise.each")) assert(y(L),string.format(m,"Promise.each")) return J._new(debug.traceback(nil,2),function(M,N,O) local P={} local Q={} local R=false local function S() for T,U in ipairs(Q)do U:cancel() end end O(function() R=true S() end) local T={} for U,V in ipairs(K)do if J.is(V)then if V:getStatus()==J.Status.Cancelled then S() return N(B.new{ error="Promise is cancelled", kind=B.Kind.AlreadyCancelled, context=string.format( "The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s", U, V._source ), }) elseif V:getStatus()==J.Status.Rejected then S() return N(select(2,V:await())) end local W=V:andThen(function(...) return... end) table.insert(Q,W) T[U]=W else T[U]=V end end for U,V in ipairs(T)do if J.is(V)then local W W,V=V:await() if not W then S() return N(V) end end if R then return end local W=J.resolve(L(V,U)) table.insert(Q,W) local X,Y=W:await() if not X then S() return N(Y) end P[U]=Y end M(P) end) end function J.is(K) if type(K)~="table"then return false end local L=getmetatable(K) if L==J then return true elseif L==nil then return y(K.andThen) elseif type(L)=="table" and type(rawget(L,"__index"))=="table" and y(rawget(rawget(L,"__index"),"andThen")) then return true end return false end function J.promisify(K) return function(...) return J._try(debug.traceback(nil,2),K,...) end end do local K local L function J.delay(M) assert(type(M)=="number","Bad argument #1 to Promise.delay, must be a number.") if not(M>=1.6666666666666665E-2)or M==math.huge then M=1.6666666666666665E-2 end return J._new(debug.traceback(nil,2),function(N,O,P) local Q=J._getTime() local R=Q+M local S={ resolve=N, startTime=Q, endTime=R, } if L==nil then K=S L=J._timeEvent:Connect(function() local T=J._getTime() while K~=nil and K.endTime<T do local U=K K=U.next if K==nil then L:Disconnect() L=nil else K.previous=nil end U.resolve(J._getTime()-U.startTime) end end) else if K.endTime<R then local T=K local U=T.next while U~=nil and U.endTime<R do T=U U=T.next end T.next=S S.previous=T if U~=nil then S.next=U U.previous=S end else S.next=K K.previous=S K=S end end P(function() local T=S.next if K==S then if T==nil then L:Disconnect() L=nil else T.previous=nil end K=T else local U=S.previous U.next=T if T~=nil then T.previous=U end end end) end) end end function J.prototype.timeout(K,L,M) local N=debug.traceback(nil,2) return J.race{ J.delay(L):andThen(function() return J.reject(M==nil and B.new{ kind=B.Kind.TimedOut, error="Timed out", context=string.format( "Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s", L, N ), }or M) end), K, } end function J.prototype.getStatus(K) return K._status end function J.prototype._andThen(K,L,M,N) K._unhandledRejection=false if K._status==J.Status.Cancelled then local O=J.new(function()end) O:cancel() return O end return J._new(L,function(O,P,Q) local R=O if M then R=H(L,M,O,P) end local S=P if N then S=H(L,N,O,P) end if K._status==J.Status.Started then table.insert(K._queuedResolve,R) table.insert(K._queuedReject,S) Q(function() if K._status==J.Status.Started then table.remove(K._queuedResolve,table.find(K._queuedResolve,R)) table.remove(K._queuedReject,table.find(K._queuedReject,S)) end end) elseif K._status==J.Status.Resolved then R(unpack(K._values,1,K._valuesLength)) elseif K._status==J.Status.Rejected then S(unpack(K._values,1,K._valuesLength)) end end,K) end function J.prototype.andThen(K,L,M) assert(L==nil or y(L),string.format(m,"Promise:andThen")) assert(M==nil or y(M),string.format(m,"Promise:andThen")) return K:_andThen(debug.traceback(nil,2),L,M) end function J.prototype.catch(K,L) assert(L==nil or y(L),string.format(m,"Promise:catch")) return K:_andThen(debug.traceback(nil,2),nil,L) end function J.prototype.tap(K,L) assert(y(L),string.format(m,"Promise:tap")) return K:_andThen(debug.traceback(nil,2),function(...) local M=L(...) if J.is(M)then local N,O=D(...) return M:andThen(function() return unpack(O,1,N) end) end return... end) end function J.prototype.andThenCall(K,L,...) assert(y(L),string.format(m,"Promise:andThenCall")) local M,N=D(...) return K:_andThen(debug.traceback(nil,2),function() return L(unpack(N,1,M)) end) end function J.prototype.andThenReturn(K,...) local L,M=D(...) return K:_andThen(debug.traceback(nil,2),function() return unpack(M,1,L) end) end function J.prototype.cancel(K) if K._status~=J.Status.Started then return end K._status=J.Status.Cancelled if K._cancellationHook then K._cancellationHook() end coroutine.close(K._thread) if K._parent then K._parent:_consumerCancelled(K) end for L in pairs(K._consumers)do L:cancel() end K:_finalize() end function J.prototype._consumerCancelled(K,L) if K._status~=J.Status.Started then return end K._consumers[L]=nil if next(K._consumers)==nil then K:cancel() end end function J.prototype._finally(K,L,M) K._unhandledRejection=false local N=J._new(L,function(N,O,P) local Q P(function() K:_consumerCancelled(K) if Q then Q:cancel() end end) local R=N if M then R=function(...) local S=M(...) if J.is(S)then Q=S S :finally(function(T) if T~=J.Status.Rejected then N(K) end end) :catch(function(...) O(...) end) else N(K) end end end if K._status==J.Status.Started then table.insert(K._queuedFinally,R) else R(K._status) end end) return N end function J.prototype.finally(K,L) assert(L==nil or y(L),string.format(m,"Promise:finally")) return K:_finally(debug.traceback(nil,2),L) end function J.prototype.finallyCall(K,L,...) assert(y(L),string.format(m,"Promise:finallyCall")) local M,N=D(...) return K:_finally(debug.traceback(nil,2),function() return L(unpack(N,1,M)) end) end function J.prototype.finallyReturn(K,...) local L,M=D(...) return K:_finally(debug.traceback(nil,2),function() return unpack(M,1,L) end) end function J.prototype.awaitStatus(K) K._unhandledRejection=false if K._status==J.Status.Started then local L=coroutine.running() K :finally(function() task.spawn(L) end) :catch( function()end ) coroutine.yield() end if K._status==J.Status.Resolved then return K._status,unpack(K._values,1,K._valuesLength) elseif K._status==J.Status.Rejected then return K._status,unpack(K._values,1,K._valuesLength) end return K._status end local function K(L,...) return L==J.Status.Resolved,... end function J.prototype.await(L) return K(L:awaitStatus()) end local function L(M,...) if M~=J.Status.Resolved then error((...)==nil and"Expected Promise rejected with no value."or(...),3) end return... end function J.prototype.expect(M) return L(M:awaitStatus()) end J.prototype.awaitValue=J.prototype.expect function J.prototype._unwrap(M) if M._status==J.Status.Started then error("Promise has not resolved or rejected.",2) end local N=M._status==J.Status.Resolved return N,unpack(M._values,1,M._valuesLength) end function J.prototype._resolve(M,...) if M._status~=J.Status.Started then if J.is((...))then (...):_consumerCancelled(M) end return end if J.is((...))then if select("#",...)>1 then local N=string.format([[When returning a Promise from andThen, extra arguments are discarded! See:%s]], M._source ) warn(N) end local N=... local O=N:andThen(function(...) M:_resolve(...) end,function(...) local O=N._values[1] if N._error then O=B.new{ error=N._error, kind=B.Kind.ExecutionError, context="[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]", }end if B.isKind(O,B.Kind.ExecutionError)then return M:_reject(O:extend{ error="This Promise was chained to a Promise that errored.", trace="", context=string.format( "The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n", M._source ), }) end M:_reject(...) end) if O._status==J.Status.Cancelled then M:cancel() elseif O._status==J.Status.Started then M._parent=O O._consumers[M]=true end return end M._status=J.Status.Resolved M._valuesLength,M._values=D(...) for N,O in ipairs(M._queuedResolve)do coroutine.wrap(O)(...) end M:_finalize() end function J.prototype._reject(M,...) if M._status~=J.Status.Started then return end M._status=J.Status.Rejected M._valuesLength,M._values=D(...) if not I(M._queuedReject)then for N,O in ipairs(M._queuedReject)do coroutine.wrap(O)(...) end else local N=tostring((...)) coroutine.wrap(function() J._timeEvent:Wait() if not M._unhandledRejection then return end local O=string.format("Unhandled Promise rejection:\n\n%s\n\n%s",N,M._source) for P,Q in ipairs(J._unhandledRejectionCallbacks)do task.spawn(Q,M,unpack(M._values,1,M._valuesLength)) end if J.TEST then return end warn(O) end)() end M:_finalize() end function J.prototype._finalize(M) for N,O in ipairs(M._queuedFinally)do coroutine.wrap(O)(M._status) end M._queuedFinally=nil M._queuedReject=nil M._queuedResolve=nil if not J.TEST then M._parent=nil M._consumers=nil end task.defer(coroutine.close,M._thread) end function J.prototype.now(M,N) local O=debug.traceback(nil,2) if M._status==J.Status.Resolved then return M:_andThen(O,function(...) return... end) else return J.reject(N==nil and B.new{ kind=B.Kind.NotResolvedInTime, error="This Promise was not resolved in time for :now()", context=":now() was called at:\n\n"..O, }or N) end end function J.retry(M,N,...) assert(y(M),"Parameter #1 to Promise.retry must be a function") assert(type(N)=="number","Parameter #2 to Promise.retry must be a number") local O,P={...},select("#",...) return J.resolve(M(...)):catch(function(...) if N>0 then return J.retry(M,N-1,unpack(O,1,P)) else return J.reject(...) end end) end function J.retryWithDelay(M,N,O,...) assert(y(M),"Parameter #1 to Promise.retry must be a function") assert(type(N)=="number","Parameter #2 (times) to Promise.retry must be a number") assert(type(O)=="number","Parameter #3 (seconds) to Promise.retry must be a number") local P,Q={...},select("#",...) return J.resolve(M(...)):catch(function(...) if N>0 then J.delay(O):await() return J.retryWithDelay(M,N-1,O,unpack(P,1,Q)) else return J.reject(...) end end) end function J.fromEvent(M,N) N=N or function() return true end return J._new(debug.traceback(nil,2),function(O,P,Q) local R local S=false local function T() R:Disconnect() R=nil end R=M:Connect(function(...) local U=N(...) if U==true then O(...) if R then T() else S=true end elseif type(U)~="boolean"then error"Promise.fromEvent predicate should always return a boolean" end end) if S and R then return T() end Q(T) end) end function J.onUnhandledRejection(M) table.insert(J._unhandledRejectionCallbacks,M) return function() local N=table.find(J._unhandledRejectionCallbacks,M) if N then table.remove(J._unhandledRejectionCallbacks,N) end end end return J end end, Properties={ Name="Promise" }, Reference=51, ClassName="ModuleScript" }, { Closure=function()return function(a) local aa=a.Libraries.Generic.Cache; local c=aa.Get'Actions' local function m(q,y) if(typeof(q)=='table')then for A,B in q do c[B]=y end else c[q]=y end return true end local function q(y) if(typeof(y)=='table')then for A,B in y do if(not c[B])then continue end return true end return false else return c[y] end end return table.freeze{SetActionState=m,GetActionState=q} end end, Properties={ Name="Actions" }, Reference=48, ClassName="ModuleScript" } } } } } } } } } } do local aa,c,m,q,y,A,B,D,E,F,G,H,I,J,K,L='0.4.2',Flags or{},script,next,unpack,table,require,type,pcall,getfenv,setfenv,setmetatable,rawget,coroutine,task,Instance local M,N,O,P,Q,R,S,T,U=A.insert,A.freeze,J.wrap,K.defer,K.cancel,L.new,(c.ContextualExecution==nil and true)or c.ContextualExecution do if S then local V=game:GetService'RunService'T=V:IsServer()U=V:IsClient()end end local V,W,X,Y,Z,_={},{},{},{},{},{}local function ac(ad)local ae,af=E(R,ad.ClassName)if not ae then return end V[ad.Reference]=af if ad.Closure then X[af]=ad.Closure if af:IsA'BaseScript'then M(Z,af)end end if ad.Properties then for ag,ah in q,ad.Properties do E(function()af[ag]=ah end)end end if ad.RefProperties then for ag,ah in q,ad.RefProperties do M(W,{InstanceObject=af,Property=ag,ReferenceId=ah})end end if ad.Attributes then for ag,ah in q,ad.Attributes do E(af.SetAttribute,af,ag,ah)end end if ad.Children then for ag,ah in q,ad.Children do local ai=ac(ah)if ai then ai.Parent=af end end end return af end local ad={}do for ae,af in q,a do M(ad,ac(af))end end local ae=F(0)local function af(ag)local ah=Y[ag]if ag.ClassName=='ModuleScript'and ah then return y(ah)end local ai=X[ag]if not ai then return end do local aj local ak={maui=N{Version=aa,Script=m,Shared=_,GetScript=function()return m end,GetShared=function()return _ end},script=ag,require=function(ak,...)if ak and ak.ClassName=='ModuleScript'and X[ak]then return af(ak)end return B(ak,...)end,getfenv=function(ak,...)if D(ak)=='number'and ak>=0 then if ak==0 then return aj else ak=ak+1 local al,am=E(F,ak)if al and am==ae then return aj end end end return F(ak,...)end,setfenv=function(ak,al,...)if D(ak)=='number'and ak>=0 then if ak==0 then return G(aj,al)else ak=ak+1 local am,an=E(F,ak)if am and an==ae then return G(aj,al)end end end return G(ak,al,...)end}aj=H({},{__index=function(al,am)local an=I(aj,am)if an~=nil then return an end local ao=ak[am]if ao~=nil then return ao end return ae[am]end})G(ai,aj)end local aj=O(ai)if ag:IsA'BaseScript'then local ak=(not S or not ag.Disabled)and P(aj)if S then local al al=ag:GetPropertyChangedSignal'Disabled':Connect(function(am)al:Disconnect()if am==false then af(ag)else E(Q,ak)end end)end return else local ak={aj()}Y[ag]=ak return y(ak)end end for ag,ah in q,W do E(function()ah.InstanceObject[ah.Property]=V[ah.ReferenceId]end)end for ag,ah in q,Z do if not S or((T and ah.ClassName=='Script')or(U and ah.ClassName=='LocalScript'))then af(ah)end end if c.ReturnMainModule==nil or c.ReturnMainModule then local ag do for ah,ai in q,ad do if ai.ClassName=='ModuleScript'and ai.Name=='MainModule'then ag=ai break end end end if ag then return af(ag)end end end
